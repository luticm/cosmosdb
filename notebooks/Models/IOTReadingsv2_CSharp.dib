#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":["c#","cs"],"languageName":"C#","name":"csharp"},{"aliases":["f#","fs"],"languageName":"F#","name":"fsharp"},{"aliases":[],"languageName":"HTML","name":"html"},{"aliases":[],"languageName":"http","name":"httpRequest"},{"aliases":["js"],"languageName":"JavaScript","name":"javascript"},{"aliases":[],"languageName":"KQL","name":"kql"},{"aliases":[],"languageName":"Mermaid","name":"mermaid"},{"aliases":["powershell"],"languageName":"PowerShell","name":"pwsh"},{"aliases":[],"languageName":"SQL","name":"sql"},{"aliases":[],"name":"value"}]}}

#!markdown

- reference documentation: https://github.com/dotnet/interactive/blob/main/docs/magic-commands.md

#!csharp

#r "nuget:Microsoft.Azure.Cosmos"
#r "nuget:Microsoft.Extensions.Configuration"
#r "nuget:Microsoft.Extensions.Configuration.Ini"

#!csharp

using Microsoft.Azure.Cosmos;
using Microsoft.Extensions.Configuration.Ini;
using Microsoft.Extensions.Configuration;

IConfigurationBuilder cb = new ConfigurationBuilder()
    .AddIniFile(System.IO.Path.Combine(System.IO.Directory.GetParent(Environment.CurrentDirectory).ToString(), "NotebookConfig.cfg"), true, true);
IConfiguration config = cb.Build();

string cosmosAccountURI = config["CosmosDB:COSMOSDB_ACCOUNT_URI"];
string cosmosAccountKey = config["CosmosDB:COSMOSDB_ACCOUNT_KEY"];

string databaseName = "Models";
string containerName = "Cnt10PhysicalPartitions";
string partitionKeypath = @"/PartitionKey";
string osPath = @"./OutputFiles/";

CosmosClient client = new CosmosClient(cosmosAccountURI, cosmosAccountKey, new CosmosClientOptions() { ConnectionMode = ConnectionMode.Gateway});
Container ctr = client.GetContainer(databaseName, containerName);

Console.WriteLine(config["CosmosDB:COSMOSDB_ACCOUNT_URI"]);

#!csharp

List<dynamic> result = new List<dynamic>();
double totalRU = 0;

QueryDefinition query = new QueryDefinition("SELECT SUBSTRING(c.PartitionKey, 0, 23) AS PKPrefix, COUNT(c.id) AS Total, MIN(c.PartitionKey) as MinPK, MAX(c.PartitionKey) AS MaxPK FROM c GROUP BY SUBSTRING(c.PartitionKey, 0, 23)");
using (FeedIterator<dynamic> rsIterator = ctr.GetItemQueryIterator<dynamic>(query
    , requestOptions: new QueryRequestOptions() { MaxItemCount = 100 }))
{
    while (rsIterator.HasMoreResults)
    {
        FeedResponse<dynamic> response = await rsIterator.ReadNextAsync();
        result.AddRange(response.Resource);
        totalRU += response.RequestCharge;

        // if (response.Diagnostics != null)
        // {
        //     Console.WriteLine($"\nQuery Diagnostics: {response.Diagnostics.ToString()}");
        // }
    }
}

Console.WriteLine("Total RU: {0}: ", totalRU);
Console.WriteLine("Query result: ");
foreach(Object r in result) {
    Console.WriteLine(r.ToString());
}

#!markdown

## Query tests

#!csharp

// Single physical partition

List<dynamic> result = new List<dynamic>();
double totalRU = 0;

QueryDefinition query = new QueryDefinition("SELECT c.PartitionKey, count(r.Dimension) AS Count, max(c.Entity.Name) AS Entity, sum(r.Metric) AS Metric  FROM c JOIN r in c.Readings WHERE c.PartitionKey = 'wvWt_725520481170_Type4' GROUP BY c.PartitionKey");
using (FeedIterator<dynamic> rsIterator = ctr.GetItemQueryIterator<dynamic>(query
    , requestOptions: new QueryRequestOptions() { MaxItemCount = 100 }))
{
    while (rsIterator.HasMoreResults)
    {
        FeedResponse<dynamic> response = await rsIterator.ReadNextAsync();
        result.AddRange(response.Resource);
        totalRU += response.RequestCharge;
    }
}

Console.WriteLine("Total RU: {0}: ", totalRU);
Console.WriteLine("Query result: ");
foreach(Object r in result) {
    Console.WriteLine(r.ToString());
}

#!csharp

// Cross partition query

List<dynamic> result = new List<dynamic>();
double totalRU = 0;

// SELECT SUBSTRING(c.PartitionKey, 0, 23) AS PartitionKey, count(r.Dimension) AS Count, max(c.Entity.Name) AS Entity, sum(r.Metric) AS Metric
// FROM c JOIN r in c.Readings 
// WHERE startswith(c.PartitionKey, 'fYuo_086671929026_Type3') 
// GROUP BY SUBSTRING(c.PartitionKey, 0, 23)

QueryDefinition query = new QueryDefinition("SELECT SUBSTRING(c.PartitionKey, 0, 23) AS PartitionKey, count(r.Dimension) AS Count, max(c.Entity.Name) AS Entity, sum(r.Metric) AS Metric FROM c JOIN r in c.Readings WHERE startswith(c.PartitionKey, 'KNYL_225086316503_Type1') GROUP BY SUBSTRING(c.PartitionKey, 0, 23)");
using (FeedIterator<dynamic> rsIterator = ctr.GetItemQueryIterator<dynamic>(query
    , requestOptions: new QueryRequestOptions() { MaxItemCount = 1000 }))
{
    while (rsIterator.HasMoreResults)
    {
        FeedResponse<dynamic> response = await rsIterator.ReadNextAsync();
        result.AddRange(response.Resource);
        totalRU += response.RequestCharge;
    }
}

Console.WriteLine("Total RU: {0}: ", totalRU);
Console.WriteLine("Query result: ");
foreach(Object r in result) {
    Console.WriteLine(r.ToString());
}
